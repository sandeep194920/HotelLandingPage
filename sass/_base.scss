/*
COLORS

Primary: #eb2f64
Primary light: #FF3366
Primary dark: #BA265D

Grey light 1: #faf9f9
Grey light 2: #f4f2f2
Grey light 3: #f0eeee
Grey light 4: #ccc

Grey dark 1: #333
Grey dark 2: #777
Grey dark 3: #999

*/

/*
CSS CUSTOM PROPERTIES / CSS VARIABLES

* We can now use CSS custom variables and dont have to rely on SAAS variables

* Whats wrong with SAAS vatiables? Why to use CSS Custom props?

  -> Well, we dont need the preprocessor in that case (no need to convert saas variables to css)
  -> Not only that, they can be manipulated  in javascript and we can also edit them in devtools
  -> It's easy to use css variables in CALC functions. Css variables also cascade and are inherited. So they are very differnt from SAAS variables in that regard

*/

// css custom props need to be defined inside a scope (declaration block) just like *{}. We can put css variables in any selector, but then it will be available only on that element and their children
// Also, we need a central place where we define these css variables. This place can generally be the root pseudo class

// root is a pseudo class which is just like html{} selector but with higher specificity.
// Props here apply to the entire document or webapp and will be available to all the child elements

//   we consume the custom props using var keyword
:root {
  // we use --name-of-the-property. works very similar to normal css property
  --color-primary: #eb2f64;
  --color-primary-light: #ff3366;
  --color-primary-dark: #ba265d;

  --color-grey-light-1: #faf9f9;
  --color-grey-light-2: #f4f2f2;
  --color-grey-light-3: #f0eeee;
  --color-grey-light-4: #ccc;

  --color-grey-dark-1: #333;
  --color-grey-dark-2: #777;
  --color-grey-dark-3: #999;

  --shadow-dark: 0 2rem 6rem rgba(0, 0, 0, 0.3);
}

* {
  margin: 0;
  padding: 0;
}

*,
*:after,
*:before {
  /* instead of setting this border-box setting on all elements here(*), you should define this in html so that you can use inherit in * (here) for all elements to inherit from html */
  box-sizing: inherit;
}

html {
  // good practice to set it here and then all elements will inherit this as and when they load (defined in *{} above)
  box-sizing: border-box;
  //it should be in % rather than px so that user can change it in the browser when zooms in or out. Default is 16px but we need a % equal to 10px which is 10/16 which is 62.5%
  font-size: 62.5%; //1rem = 10px, 10px/16px = 62.5%. 16px is the browser default. Taking it as 10px as base font-size makes it easy for our calculation
}

body {
  // Open Sans coming from google fonts
  font-family: "Open Sans", sans-serif;
  font-weight: 400;
  line-height: 1.6;
  // we consume the custom props using var keyword
  background-image: linear-gradient(
    to right bottom,
    var(--color-primary-light),
    var(--color-primary-dark)
  );
  background-size: cover;

  // since body height at this point is small, the background repeats itself vertically, so let's eliminate that
  background-repeat: no-repeat;

  // let's increase our height of the body now.
  min-height: 100vh; // minimum will be 100vh. If body increases than 100vh then height also increases. Note that we can remove background-repeat property since height is set to 100vh and it wont repeat, but lets keep it
  color: var(--color-grey-dark-2);
}
